<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_ENTITY_TYPE_delete() for nodes.
 */
function prevent_node_deletion_node_delete(EntityInterface $entity, MessengerInterface $messenger) {
  // Check if the entity being deleted is a node.
  if ($entity instanceof NodeInterface) {
    // Check if the node being deleted is of the "patient" content type.
    if ($entity->getType() === 'patient') {
      // Get the current user.
      $account = \Drupal::currentUser();

      // Check if the user has the "bypass node access" permission.
      if (!$account->hasPermission('bypass node access')) {
        // Cancel the node deletion.
        try {
          $entity->setPublished(FALSE);
          $entity->save();
        }
        catch (EntityStorageException $e) {
          // Log an error and display a message to the user.
          \Drupal::logger('prevent_node_deletion')->error('Unable to unpublish node: @message', ['@message' => $e->getMessage()]);
          $messenger->addError('Unable to unpublish node: @message', ['@message' => $e->getMessage()]);
        }
        throw new \Drupal\Core\Entity\EntityStorageException('Nodes of the "patient" content type cannot be deleted.');
      }
    }
  }
}
